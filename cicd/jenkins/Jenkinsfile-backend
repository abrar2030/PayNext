pipeline {
    agent any
    
    tools {
        maven 'Maven 3.8.6'
        jdk 'JDK 17'
    }
    
    environment {
        DOCKER_CREDENTIALS = credentials('docker-credentials')
        SONARQUBE_TOKEN = credentials('sonarqube-token')
        SONARQUBE_URL = credentials('sonarqube-url')
        KUBECONFIG_CREDENTIALS = credentials('kubeconfig')
        DOCKER_IMAGE_PREFIX = 'abrar2030/paynext'
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        
        stage('Backend Build') {
            steps {
                dir('backend') {
                    sh 'mvn clean package -DskipTests'
                }
            }
        }
        
        stage('Backend Test') {
            steps {
                dir('backend') {
                    sh 'mvn test'
                }
            }
            post {
                always {
                    junit '**/target/surefire-reports/*.xml'
                }
            }
        }
        
        stage('Backend Code Quality') {
            steps {
                dir('backend') {
                    withSonarQubeEnv('SonarQube') {
                        sh 'mvn sonar:sonar -Dsonar.projectKey=paynext-backend -Dsonar.host.url=${SONARQUBE_URL} -Dsonar.login=${SONARQUBE_TOKEN}'
                    }
                }
            }
        }
        
        stage('Backend Docker Build & Push') {
            steps {
                script {
                    // Login to Docker registry
                    sh 'echo ${DOCKER_CREDENTIALS_PSW} | docker login -u ${DOCKER_CREDENTIALS_USR} --password-stdin'
                    
                    // Build and push microservices
                    def services = [
                        'eureka-server',
                        'api-gateway',
                        'user-service',
                        'payment-service',
                        'notification-service'
                    ]
                    
                    for (service in services) {
                        def imageTag = "${DOCKER_IMAGE_PREFIX}-${service}:${env.BUILD_NUMBER}"
                        sh """
                            docker buildx build -t ${imageTag} -f Dockerfile --build-arg SERVICE_NAME=${service} ./backend
                            docker push ${imageTag}
                            
                            # Also tag as latest if on main branch
                            if [ "${env.BRANCH_NAME}" = "main" ]; then
                                docker tag ${imageTag} ${DOCKER_IMAGE_PREFIX}-${service}:latest
                                docker push ${DOCKER_IMAGE_PREFIX}-${service}:latest
                            fi
                        """
                    }
                }
            }
        }
        
        stage('Deploy Backend to Kubernetes') {
            when {
                branch 'main'
            }
            steps {
                script {
                    // Configure kubectl
                    sh 'mkdir -p ~/.kube'
                    sh 'echo "${KUBECONFIG_CREDENTIALS}" > ~/.kube/config'
                    
                    // Apply Kubernetes manifests
                    sh 'kubectl apply -f kubernetes/eureka-server-deployment.yaml'
                    sh 'kubectl apply -f kubernetes/api-gateway-deployment.yaml'
                    sh 'kubectl apply -f kubernetes/user-service-deployment.yaml'
                    sh 'kubectl apply -f kubernetes/payment-service-deployment.yaml'
                    sh 'kubectl apply -f kubernetes/notification-service-deployment.yaml'
                    
                    // Verify deployments
                    sh 'kubectl rollout status deployment/eureka-server --timeout=300s'
                    sh 'kubectl rollout status deployment/api-gateway --timeout=300s'
                    sh 'kubectl rollout status deployment/user-service --timeout=300s'
                    sh 'kubectl rollout status deployment/payment-service --timeout=300s'
                    sh 'kubectl rollout status deployment/notification-service --timeout=300s'
                }
            }
        }
    }
    
    post {
        always {
            cleanWs()
        }
        success {
            echo 'Backend pipeline completed successfully!'
        }
        failure {
            echo 'Backend pipeline failed!'
        }
    }
}
